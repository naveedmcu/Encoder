f N "S" 2 499 ""
D G "__PCD__" 2 499 ""5.070""
D G "__DEVICE__" 2 499 "4011"
D G "__DATE__" 2 499 ""24-Jul-18""
D G "__TIME__" 2 499 ""03:06:16""
D G "_UNICODE" 2 499 ""?""
D G "__EVAL" 2 499 ""?"" "Standard Header file for the DSPIC30F4011 device ////////////////"
c L "set_tris_b" 2 3 6 "FUNCTION"
f N "set_tris_b" 2 46 ""
v L "value" 2 46 "int16" `54 
f B "set_tris_b" 2 46 "void(int16 value)" `53 
f N "set_tris_c" 2 47 ""
v L "value" 2 47 "int16" `56 
f B "set_tris_c" 2 47 "void(int16 value)" `55 
f N "set_tris_d" 2 48 ""
v L "value" 2 48 "int16" `58 
f B "set_tris_d" 2 48 "void(int16 value)" `57 
f N "set_tris_e" 2 49 ""
v L "value" 2 49 "int16" `60 
f B "set_tris_e" 2 49 "void(int16 value)" `59 
f N "set_tris_f" 2 50 ""
v L "value" 2 50 "int16" `62 
f B "set_tris_f" 2 50 "void(int16 value)" `61 
f N "get_tris_b" 2 51 ""
f B "get_tris_b" 2 51 "int16()" `63 
f N "get_tris_c" 2 52 ""
f B "get_tris_c" 2 52 "int16()" `64 
f N "get_tris_d" 2 53 ""
f B "get_tris_d" 2 53 "int16()" `65 
f N "get_tris_e" 2 54 ""
f B "get_tris_e" 2 54 "int16()" `66 
f N "get_tris_f" 2 55 ""
f B "get_tris_f" 2 55 "int16()" `67 
f N "output_b" 2 56 ""
v L "value" 2 56 "int16" `69 
f B "output_b" 2 56 "void(int16 value)" `68 
f N "output_c" 2 57 ""
v L "value" 2 57 "int16" `71 
f B "output_c" 2 57 "void(int16 value)" `70 
f N "output_d" 2 58 ""
v L "value" 2 58 "int16" `73 
f B "output_d" 2 58 "void(int16 value)" `72 
f N "output_e" 2 59 ""
v L "value" 2 59 "int16" `75 
f B "output_e" 2 59 "void(int16 value)" `74 
f N "output_f" 2 60 ""
v L "value" 2 60 "int16" `77 
f B "output_f" 2 60 "void(int16 value)" `76 
f N "input_b" 2 61 ""
f B "input_b" 2 61 "int16()" `78 
f N "input_c" 2 62 ""
f B "input_c" 2 62 "int16()" `79 
f N "input_d" 2 63 ""
f B "input_d" 2 63 "int16()" `80 
f N "input_e" 2 64 ""
f B "input_e" 2 64 "int16()" `81 
f N "input_f" 2 65 ""
f B "input_f" 2 65 "int16()" `82 
f N "input_change_b" 2 66 ""
f B "input_change_b" 2 66 "sint16()" `83 
f N "input_change_c" 2 67 ""
f B "input_change_c" 2 67 "sint16()" `84 
f N "input_change_d" 2 68 ""
f B "input_change_d" 2 68 "sint16()" `85 
f N "input_change_e" 2 69 ""
f B "input_change_e" 2 69 "sint16()" `86 
f N "input_change_f" 2 70 ""
f B "input_change_f" 2 70 "sint16()" `87 
f N "set_pullup" 2 71 ""
v L "state" 2 71 "int8" `89 
f B "set_pullup" 2 71 "void(int8 state)" `88 
f N "set_pullup" 2 72 ""
v L "state" 2 72 "int8" `91 
v L "pin" 2 72 "int16" `92 
f B "set_pullup" 2 72 "void(int8 state,int16 pin)" `90 
f N "set_pulldown" 2 73 ""
v L "state" 2 73 "int8" `94 
f B "set_pulldown" 2 73 "void(int8 state)" `93 
f N "set_pulldown" 2 74 ""
v L "state" 2 74 "int8" `96 
v L "pin" 2 74 "int16" `97 
f B "set_pulldown" 2 74 "void(int8 state,int16 pin)" `95 
f N "input" 2 75 ""
v L "pin" 2 75 "int16" `99 
f B "input" 2 75 "int8(int16 pin)" `98 
f N "input_state" 2 76 ""
v L "pin" 2 76 "int16" `101 
f B "input_state" 2 76 "int8(int16 pin)" `100 
f N "output_low" 2 77 ""
v L "pin" 2 77 "int16" `103 
f B "output_low" 2 77 "void(int16 pin)" `102 
f N "output_high" 2 78 ""
v L "pin" 2 78 "int16" `105 
f B "output_high" 2 78 "void(int16 pin)" `104 
f N "output_toggle" 2 79 ""
v L "pin" 2 79 "int16" `107 
f B "output_toggle" 2 79 "void(int16 pin)" `106 
f N "output_bit" 2 80 ""
v L "pin" 2 80 "int16" `109 
v L "level" 2 80 "int8" `110 
f B "output_bit" 2 80 "void(int16 pin,int8 level)" `108 
f N "output_float" 2 81 ""
v L "pin" 2 81 "int16" `112 
f B "output_float" 2 81 "void(int16 pin)" `111 
f N "output_drive" 2 82 ""
v L "pin" 2 82 "int16" `114 
f B "output_drive" 2 82 "void(int16 pin)" `113  "Constants used to identify pins in the above are:"
d G "PIN_B0" 2 85 "5696"
d G "PIN_B1" 2 86 "5697"
d G "PIN_B2" 2 87 "5698"
d G "PIN_B3" 2 88 "5699"
d G "PIN_B4" 2 89 "5700"
d G "PIN_B5" 2 90 "5701"
d G "PIN_B6" 2 91 "5702"
d G "PIN_B7" 2 92 "5703"
d G "PIN_B8" 2 93 "5704"
d G "PIN_C13" 2 95 "5757"
d G "PIN_C14" 2 96 "5758"
d G "PIN_C15" 2 97 "5759"
d G "PIN_D0" 2 99 "5792"
d G "PIN_D1" 2 100 "5793"
d G "PIN_D2" 2 101 "5794"
d G "PIN_D3" 2 102 "5795"
d G "PIN_E0" 2 104 "5840"
d G "PIN_E1" 2 105 "5841"
d G "PIN_E2" 2 106 "5842"
d G "PIN_E3" 2 107 "5843"
d G "PIN_E4" 2 108 "5844"
d G "PIN_E5" 2 109 "5845"
d G "PIN_E8" 2 110 "5848"
d G "PIN_F0" 2 112 "5888"
d G "PIN_F1" 2 113 "5889"
d G "PIN_F2" 2 114 "5890"
d G "PIN_F3" 2 115 "5891"
d G "PIN_F4" 2 116 "5892"
d G "PIN_F5" 2 117 "5893"
d G "PIN_F6" 2 118 "5894"
d G "FALSE" 2 121 "0"
d G "TRUE" 2 122 "1"
d G "BYTE" 2 124 "unsigned int8"
d G "BOOLEAN" 2 125 "int1"
d G "getc" 2 127 "getch"
d G "fgetc" 2 128 "getch"
d G "getchar" 2 129 "getch"
d G "putc" 2 130 "putchar"
d G "fputc" 2 131 "putchar"
d G "fgets" 2 132 "gets"
d G "fputs" 2 133 "puts"
c L "output_drive" 2 3 2 "FUNCTION"
f N "setup_uart" 2 137 ""
v L "baud" 2 137 "int32" `116 
f B "setup_uart" 2 137 "void(int32 baud)" `115 
f N "setup_uart" 2 138 ""
v L "baud" 2 138 "int32" `118 
v L "stream" 2 138 "int8" `119 
f B "setup_uart" 2 138 "void(int32 baud,int8 stream)" `117 
f N "setup_uart" 2 139 ""
v L "baud" 2 139 "int32" `121 
v L "stream" 2 139 "int8" `122 
v L "clock" 2 139 "int32" `123 
f B "setup_uart" 2 139 "void(int32 baud,int8 stream,int32 clock)" `120 
f N "set_uart_speed" 2 140 ""
v L "baud" 2 140 "int32" `125 
f B "set_uart_speed" 2 140 "void(int32 baud)" `124 
f N "set_uart_speed" 2 141 ""
v L "baud" 2 141 "int32" `127 
v L "stream" 2 141 "int8" `128 
f B "set_uart_speed" 2 141 "void(int32 baud,int8 stream)" `126 
f N "set_uart_speed" 2 142 ""
v L "baud" 2 142 "int32" `130 
v L "stream" 2 142 "int8" `131 
v L "clock" 2 142 "int32" `132 
f B "set_uart_speed" 2 142 "void(int32 baud,int8 stream,int32 clock)" `129  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 146 "2"
d G "UART_DATA" 2 147 "4"
d G "UART_AUTODETECT" 2 148 "8"
d G "UART_AUTODETECT_NOWAIT" 2 149 "9"
d G "UART_WAKEUP_ON_RDA" 2 150 "10"
d G "UART_SEND_BREAK" 2 151 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_wdt" 2 156 ""
v L "mode" 2 156 "int8" `134 
f B "setup_wdt" 2 156 "void(int8 mode)" `133 
f N "restart_wdt" 2 157 ""
f B "restart_wdt" 2 157 "void()" `135  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 159 "1"
d G "WDT_OFF" 2 160 "0"
d G "WDT_2MS" 2 162 "0x022"
d G "WDT_4MS" 2 163 "0x023"
d G "WDT_8MS" 2 164 "0x025"
d G "WDT_16MS" 2 165 "0x029"
d G "WDT_32MS" 2 166 "0x031"
d G "WDT_64MS" 2 167 "0x045"
d G "WDT_128MS" 2 168 "0x049"
d G "WDT_256MS" 2 169 "0x051"
d G "WDT_512MS" 2 170 "0x065"
d G "WDT_1S" 2 171 "0x069"
d G "WDT_2S" 2 172 "0x071"
d G "WDT_4S" 2 173 "0x085"
d G "WDT_8S" 2 174 "0x089"
d G "WDT_16S" 2 175 "0x091"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "restart_cause" 2 180 ""
f B "restart_cause" 2 180 "int8()" `136 
f N "reset_cpu" 2 181 ""
f B "reset_cpu" 2 181 "void()" `137 
f N "sleep" 2 182 ""
f B "sleep" 2 182 "void()" `138 
f N "sleep" 2 183 ""
v L "mode" 2 183 "int8" `140 
f B "sleep" 2 183 "void(int8 mode)" `139  "Constants passed into RESTART_CAUSE() are:"
d G "RESTART_POWER_UP" 2 185 "0"
d G "RESTART_BROWNOUT" 2 186 "1"
d G "RESTART_WATCHDOG" 2 187 "4"
d G "RESTART_SOFTWARE" 2 188 "6"
d G "RESTART_MCLR" 2 189 "7"
d G "RESTART_ILLEGAL_OP" 2 190 "14"
d G "RESTART_TRAP_CONFLICT" 2 191 "15"
d G "SLEEP_FULL" 2 194 "0" "Default"
d G "SLEEP_IDLE" 2 195 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 201 ""
v L "type" 2 201 "int8" `142 
v L "target" 2 201 "int32" `143 
f B "setup_oscillator" 2 201 "void(int8 type,int32 target)" `141 
f N "setup_oscillator" 2 202 ""
v L "type" 2 202 "int8" `145 
v L "target" 2 202 "int32" `146 
v L "source" 2 202 "int32" `147 
f B "setup_oscillator" 2 202 "void(int8 type,int32 target,int32 source)" `144  "Constants used in setup_oscillator() are:"
d G "OSC_INTERNAL" 2 204 "32"
d G "OSC_CRYSTAL" 2 205 "1"
d G "OSC_CLOCK" 2 206 "2"
d G "OSC_RC" 2 207 "3"
d G "OSC_SECONDARY" 2 208 "16"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_timer1" 2 214 ""
v L "mode" 2 214 "int16" `149 
f B "setup_timer1" 2 214 "void(int16 mode)" `148 
f N "setup_timer1" 2 215 ""
v L "mode" 2 215 "int16" `151 
v L "period" 2 215 "int16" `152 
f B "setup_timer1" 2 215 "void(int16 mode,int16 period)" `150 
f N "get_timer1" 2 216 ""
f B "get_timer1" 2 216 "int16()" `153 
f N "set_timer1" 2 217 ""
v L "value" 2 217 "int16" `155 
f B "set_timer1" 2 217 "void(int16 value)" `154 
f N "setup_timer2" 2 218 ""
v L "mode" 2 218 "int16" `157 
f B "setup_timer2" 2 218 "void(int16 mode)" `156 
f N "setup_timer2" 2 219 ""
v L "mode" 2 219 "int16" `159 
v L "period" 2 219 "int16" `160 
f B "setup_timer2" 2 219 "void(int16 mode,int16 period)" `158 
f N "get_timer2" 2 220 ""
f B "get_timer2" 2 220 "int16()" `161 
f N "set_timer2" 2 221 ""
v L "value" 2 221 "int16" `163 
f B "set_timer2" 2 221 "void(int16 value)" `162 
f N "setup_timer3" 2 222 ""
v L "mode" 2 222 "int16" `165 
f B "setup_timer3" 2 222 "void(int16 mode)" `164 
f N "setup_timer3" 2 223 ""
v L "mode" 2 223 "int16" `167 
v L "period" 2 223 "int16" `168 
f B "setup_timer3" 2 223 "void(int16 mode,int16 period)" `166 
f N "get_timer3" 2 224 ""
f B "get_timer3" 2 224 "int16()" `169 
f N "set_timer3" 2 225 ""
v L "value" 2 225 "int16" `171 
f B "set_timer3" 2 225 "void(int16 value)" `170 
f N "get_timer23" 2 226 ""
f B "get_timer23" 2 226 "int32()" `172 
f N "set_timer23" 2 227 ""
v L "value" 2 227 "int32" `174 
f B "set_timer23" 2 227 "void(int32 value)" `173 
f N "setup_timer4" 2 228 ""
v L "mode" 2 228 "int16" `176 
f B "setup_timer4" 2 228 "void(int16 mode)" `175 
f N "setup_timer4" 2 229 ""
v L "mode" 2 229 "int16" `178 
v L "period" 2 229 "int16" `179 
f B "setup_timer4" 2 229 "void(int16 mode,int16 period)" `177 
f N "get_timer4" 2 230 ""
f B "get_timer4" 2 230 "int16()" `180 
f N "set_timer4" 2 231 ""
v L "value" 2 231 "int16" `182 
f B "set_timer4" 2 231 "void(int16 value)" `181 
f N "setup_timer5" 2 232 ""
v L "mode" 2 232 "int16" `184 
f B "setup_timer5" 2 232 "void(int16 mode)" `183 
f N "setup_timer5" 2 233 ""
v L "mode" 2 233 "int16" `186 
v L "period" 2 233 "int16" `187 
f B "setup_timer5" 2 233 "void(int16 mode,int16 period)" `185 
f N "get_timer5" 2 234 ""
f B "get_timer5" 2 234 "int16()" `188 
f N "set_timer5" 2 235 ""
v L "value" 2 235 "int16" `190 
f B "set_timer5" 2 235 "void(int16 value)" `189 
f N "get_timer45" 2 236 ""
f B "get_timer45" 2 236 "int32()" `191 
f N "set_timer45" 2 237 ""
v L "value" 2 237 "int32" `193 
f B "set_timer45" 2 237 "void(int32 value)" `192  "Constants used for SETUP_TIMERx() are:"
d G "TMR_DISABLED" 2 240 "0x0000"
d G "TMR_INTERNAL" 2 241 "0x8000"
d G "TMR_EXTERNAL" 2 242 "0x8002"
d G "TMR_EXTERNAL_SYNC" 2 243 "0x8006" "This only applies to Timer1"
d G "TMR_EXTERNAL_RTC" 2 244 "0xC002" "This only applies to Timer1"
d G "TMR_DIV_BY_1" 2 247 "0x0000"
d G "TMR_DIV_BY_8" 2 248 "0x0010"
d G "TMR_DIV_BY_64" 2 249 "0x0020"
d G "TMR_DIV_BY_256" 2 250 "0x0030"
d G "TMR_HALT_IDLE" 2 252 "0x2000"
d G "TMR_CONTINUE_IDLE" 2 253 "0x0000"
d G "TMR_32_BIT" 2 255 "0x0008" "Only for even numbered timers"
d G "TMR_GATE" 2 256 "0x0040"
c L "set_timer45" 2 3 3 "FUNCTION"
f N "setup_capture" 2 261 ""
v L "module" 2 261 "int8" `195 
v L "mode" 2 261 "int16" `196 
f B "setup_capture" 2 261 "void(int8 module,int16 mode)" `194 
f N "get_capture" 2 262 ""
v L "module" 2 262 "int8" `198 
f B "get_capture" 2 262 "int16(int8 module)" `197 
f N "get_capture" 2 263 ""
v L "module" 2 263 "int8" `200 
v L "wait" 2 263 "int8" `201 
f B "get_capture" 2 263 "int16(int8 module,int8 wait)" `199  "Constants used for SETUP_CAPTURE() are:"
d G "CAPTURE_OFF" 2 265 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 2 266 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 2 267 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 2 268 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 2 269 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 2 270 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 2 271 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 2 274 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 2 275 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 2 276 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 2 277 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 2 280 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 2 281 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 2 284 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 2 285 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 2 3 3 "FUNCTION"
f N "setup_compare" 2 290 ""
v L "module" 2 290 "int8" `203 
v L "mode" 2 290 "int16" `204 
f B "setup_compare" 2 290 "void(int8 module,int16 mode)" `202 
f N "set_pwm_duty" 2 291 ""
v L "module" 2 291 "int8" `206 
v L "duty" 2 291 "int16" `207 
f B "set_pwm_duty" 2 291 "void(int8 module,int16 duty)" `205 
f N "set_compare_time" 2 292 ""
v L "module" 2 292 "int8" `209 
v L "ocr" 2 292 "int16" `210 
f B "set_compare_time" 2 292 "void(int8 module,int16 ocr)" `208 
f N "set_compare_time" 2 293 ""
v L "module" 2 293 "int8" `212 
v L "ocr" 2 293 "int16" `213 
v L "ocrs" 2 293 "int16" `214 
f B "set_compare_time" 2 293 "void(int8 module,int16 ocr,int16 ocrs)" `211  "Constants used for SETUP_COMPARE() are:"
d G "COMPARE_OFF" 2 295 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 2 296 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 2 297 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGLE" 2 298 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 2 299 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 2 300 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 2 301 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 2 302 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 2 305 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 2 306 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 2 309 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 2 310 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 2 3 3 "FUNCTION"
f N "setup_spi" 2 315 ""
v L "mode" 2 315 "int16" `216 
f B "setup_spi" 2 315 "void(int16 mode)" `215 
f N "spi_write" 2 316 ""
v L "data" 2 316 "int8" `218 
f B "spi_write" 2 316 "void(int8 data)" `217 
f N "spi_write" 2 317 ""
v L "wait" 2 317 "int8" `220 
v L "data" 2 317 "int8" `221 
f B "spi_write" 2 317 "void(int8 wait,int8 data)" `219 
f N "spi_write_16" 2 318 ""
v L "data" 2 318 "int16" `223 
f B "spi_write_16" 2 318 "void(int16 data)" `222 
f N "spi_write_16" 2 319 ""
v L "wait" 2 319 "int8" `225 
v L "data" 2 319 "int16" `226 
f B "spi_write_16" 2 319 "void(int8 wait,int16 data)" `224 
f N "spi_read" 2 320 ""
f B "spi_read" 2 320 "int8()" `227 
f N "spi_read" 2 321 ""
v L "data" 2 321 "int8" `229 
f B "spi_read" 2 321 "int8(int8 data)" `228 
f N "spi_read_16" 2 322 ""
f B "spi_read_16" 2 322 "int16()" `230 
f N "spi_read_16" 2 323 ""
v L "data" 2 323 "int16" `232 
f B "spi_read_16" 2 323 "int16(int16 data)" `231 
f N "spi_data_is_in" 2 324 ""
f B "spi_data_is_in" 2 324 "int8()" `233  "Constants used in SETUP_SPI() are:"
d G "SPI_MASTER" 2 327 "0x0020"
d G "SPI_SLAVE" 2 328 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 2 330 "0x0040"
d G "SPI_SCK_IDLE_LOW" 2 331 "0x0000"
d G "SPI_XMIT_L_TO_H" 2 333 "0x0100"
d G "SPI_XMIT_H_TO_L" 2 334 "0x0000"
d G "SPI_MODE_16B" 2 336 "0x0400"
d G "SPI_MODE_8B" 2 337 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 339 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 2 340 "0x0000"
d G "SPI_SS_ENABLED" 2 342 "0x0000"
d G "SPI_SS_DISABLED" 2 343 "0x0080"
d G "SPI_CLK_DIV_1" 2 346 "0x001F"
d G "SPI_CLK_DIV_2" 2 347 "0x001B"
d G "SPI_CLK_DIV_3" 2 348 "0x0017"
d G "SPI_CLK_DIV_4" 2 349 "0x001E"
d G "SPI_CLK_DIV_5" 2 350 "0x000F"
d G "SPI_CLK_DIV_6" 2 351 "0x000B"
d G "SPI_CLK_DIV_7" 2 352 "0x0007"
d G "SPI_CLK_DIV_8" 2 353 "0x0003"
d G "SPI_CLK_DIV_12" 2 354 "0x0016"
d G "SPI_CLK_DIV_16" 2 355 "0x001D"
d G "SPI_CLK_DIV_20" 2 356 "0x000E"
d G "SPI_CLK_DIV_24" 2 357 "0x000A"
d G "SPI_CLK_DIV_28" 2 358 "0x0006"
d G "SPI_CLK_DIV_32" 2 359 "0x0002"
d G "SPI_CLK_DIV_48" 2 360 "0x0015"
d G "SPI_CLK_DIV_64" 2 361 "0x001C"
d G "SPI_CLK_DIV_80" 2 362 "0x000D"
d G "SPI_CLK_DIV_96" 2 363 "0x0009"
d G "SPI_CLK_DIV_112" 2 364 "0x0005"
d G "SPI_CLK_DIV_128" 2 365 "0x0001"
d G "SPI_CLK_DIV_192" 2 366 "0x0014"
d G "SPI_CLK_DIV_256" 2 367 "0x0010"
d G "SPI_CLK_DIV_320" 2 368 "0x000C"
d G "SPI_CLK_DIV_384" 2 369 "0x0008"
d G "SPI_CLK_DIV_448" 2 370 "0x0004"
d G "SPI_CLK_DIV_512" 2 371 "0x0000"
d G "SPI_L_TO_H" 2 374 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 375 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 4 "FUNCTION"
f N "setup_adc" 2 381 ""
v L "mode" 2 381 "int32" `235 
f B "setup_adc" 2 381 "void(int32 mode)" `234 
f N "setup_adc_ports" 2 382 ""
v L "pins" 2 382 "int32" `237 
f B "setup_adc_ports" 2 382 "void(int32 pins)" `236 
f N "setup_adc_ports" 2 383 ""
v L "pins" 2 383 "int32" `239 
v L "reference" 2 383 "int16" `240 
f B "setup_adc_ports" 2 383 "void(int32 pins,int16 reference)" `238 
f N "set_adc_channel" 2 384 ""
v L "channel" 2 384 "int8" `242 
f B "set_adc_channel" 2 384 "void(int8 channel)" `241 
f N "set_adc_channel" 2 385 ""
v L "channel" 2 385 "int8" `244 
v L "neg_channel" 2 385 "int8" `245 
f B "set_adc_channel" 2 385 "void(int8 channel,int8 neg_channel)" `243 
f N "read_adc" 2 386 ""
f B "read_adc" 2 386 "int16()" `246 
f N "read_adc" 2 387 ""
v L "mode" 2 387 "int8" `248 
f B "read_adc" 2 387 "int16(int8 mode)" `247 
f N "adc_done" 2 388 ""
f B "adc_done" 2 388 "int8()" `249  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 392 "0x10000"
d G "ADC_CLOCK" 2 393 "0x0000"
d G "ADC_CLOCK_DIV_2" 2 394 "0x0001"
d G "ADC_CLOCK_DIV_4" 2 395 "0x0003"
d G "ADC_CLOCK_DIV_8" 2 396 "0x0007"
d G "ADC_CLOCK_DIV_16" 2 397 "0x000F"
d G "ADC_CLOCK_DIV_32" 2 398 "0x001F"
d G "ADC_CLOCK_DIV_64" 2 399 "0x003F"
d G "ADC_CLOCK_INTERNAL" 2 400 "0x0080" "Internal"
d G "ADC_TAD_MUL_0" 2 404 "0x1F00"
d G "ADC_TAD_MUL_2" 2 405 "0x1D00"
d G "ADC_TAD_MUL_4" 2 406 "0x1B00"
d G "ADC_TAD_MUL_8" 2 407 "0x1700"
d G "ADC_TAD_MUL_16" 2 408 "0x0F00"
d G "ADC_TAD_MUL_31" 2 409 "0x0000"
d G "ADC_START_AND_READ" 2 412 "0x07"
d G "ADC_START_ONLY" 2 413 "0x01"
d G "ADC_READ_ONLY" 2 414 "0x06"
d G "VSS" 2 417 "0"
d G "NO_ANALOGS" 2 422 "0" "None"
d G "ALL_ANALOG" 2 423 "0xFFFFFFFF" "All"
d G "sAN0" 2 424 "0x00000001" "| B0"
d G "sAN1" 2 425 "0x00000002" "| B1"
d G "sAN2" 2 426 "0x00000004" "| B2"
d G "sAN3" 2 427 "0x00000008" "| B3"
d G "sAN4" 2 428 "0x00000010" "| B4"
d G "sAN5" 2 429 "0x00000020" "| B5"
d G "sAN6" 2 430 "0x00000040" "| B6"
d G "sAN7" 2 431 "0x00000080" "| B7"
d G "sAN8" 2 432 "0x00000100" "| B8"
d G "VSS_VDD" 2 435 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 2 436 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 2 437 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 2 438 "0x2000" "Range 0-VrefH"
c L "adc_done" 2 3 4 "FUNCTION"
f N "setup_qei" 2 444 ""
v L "mode" 2 444 "int16" `251 
v L "filter" 2 444 "int16" `252 
v L "maxcount" 2 444 "int16" `253 
f B "setup_qei" 2 444 "void(int16 mode,int16 filter,int16 maxcount)" `250 
f N "setup_qei" 2 445 ""
v L "unit" 2 445 "int8" `255 
v L "mode" 2 445 "int16" `256 
v L "filter" 2 445 "int16" `257 
v L "maxcount" 2 445 "int16" `258 
f B "setup_qei" 2 445 "void(int8 unit,int16 mode,int16 filter,int16 maxcount)" `254 
f N "qei_set_count" 2 446 ""
v L "count" 2 446 "int16" `260 
f B "qei_set_count" 2 446 "void(int16 count)" `259 
f N "qei_set_count" 2 447 ""
v L "unit" 2 447 "int8" `262 
v L "count" 2 447 "int16" `263 
f B "qei_set_count" 2 447 "void(int8 unit,int16 count)" `261 
f N "qei_get_count" 2 448 ""
f B "qei_get_count" 2 448 "int16()" `264 
f N "qei_get_count" 2 449 ""
v L "unit" 2 449 "int8" `266 
f B "qei_get_count" 2 449 "int16(int8 unit)" `265 
f N "qei_status" 2 450 ""
f B "qei_status" 2 450 "int16()" `267 
f N "qei_status" 2 451 ""
v L "unit" 2 451 "int8" `269 
f B "qei_status" 2 451 "int16(int8 unit)" `268  "Constants used in setup_qei() first param are:"
d G "QEI_DISABLED" 2 453 "0"
d G "QEI_MODE_X2" 2 454 "0x0400"
d G "QEI_MODE_X4" 2 455 "0x0600"
d G "QEI_MODE_TIMER" 2 456 "0x0100"
d G "QEI_STOP_WHEN_IDLE" 2 457 "0x2000"
d G "QEI_SWAP_AB" 2 458 "0x0080"
d G "QEI_OUTPUT_ENABLE" 2 459 "0x0040"
d G "QEI_RESET_WHEN_MAXCOUNT" 2 460 "0x0100"
d G "QEI_RESET_WHEN_IDX_PULSE" 2 461 "0x0004"
d G "QEI_TIMER_GATED" 2 462 "0x0020"
d G "QEI_TIMER_INTERNAL" 2 463 "0x0000"
d G "QEI_TIMER_EXTERNAL" 2 464 "0x0002"
d G "QEI_TIMER_DIV_BY_1" 2 465 "0x0000"
d G "QEI_TIMER_DIV_BY_8" 2 466 "0x0008"
d G "QEI_TIMER_DIV_BY_64" 2 467 "0x0010"
d G "QEI_TIMER_DIV_BY_256" 2 468 "0x0018"
d G "QEI_FILTER_DIV_1" 2 470 "0x0000"
d G "QEI_FILTER_DIV_2" 2 471 "0x0010"
d G "QEI_FILTER_DIV_4" 2 472 "0x0020"
d G "QEI_FILTER_DIV_16" 2 473 "0x0030"
d G "QEI_FILTER_DIV_32" 2 474 "0x0040"
d G "QEI_FILTER_DIV_64" 2 475 "0x0050"
d G "QEI_FILTER_DIV_128" 2 476 "0x0060"
d G "QEI_FILTER_DIV_256" 2 477 "0x0070"
d G "QEI_FILTER_OUTPUT" 2 478 "0x0080"
d G "QEI_NO_ERROR_INTS" 2 479 "0x0100"
d G "QEI_IDX_WHEN_A0" 2 480 "0x0000" "for 2X mode"
d G "QEI_IDX_WHEN_A1" 2 481 "0x0200" "for 2X mode"
d G "QEI_IDX_WHEN_B0" 2 482 "0x0400" "for 2X mode"
d G "QEI_IDX_WHEN_B1" 2 483 "0x0600" "for 2X mode"
d G "QEI_IDX_WHEN_A0_B0" 2 484 "0x0000" "for 4X mode"
d G "QEI_IDX_WHEN_A1_B0" 2 485 "0x0200" "for 4X mode"
d G "QEI_IDX_WHEN_A0_B1" 2 486 "0x0400" "for 4X mode"
d G "QEI_IDX_WHEN_A1_B1" 2 487 "0x0600" "for 4X mode"
d G "QEI_POS_ERROR" 2 489 "0x8000"
d G "QEI_FORWARD" 2 490 "0x0800"
d G "QEI_INDEX_PIN" 2 491 "0x1000"
c L "qei_status" 2 3 5 "FUNCTION"
f N "setup_motor_pwm" 2 498 ""
v L "pwm" 2 498 "int8" `271 
v L "mode" 2 498 "int32" `272 
v L "timebase" 2 498 "int32" `273 
f B "setup_motor_pwm" 2 498 "void(int8 pwm,int32 mode,int32 timebase)" `270 
f N "setup_motor_pwm" 2 499 ""
v L "pwm" 2 499 "int8" `275 
v L "mode" 2 499 "int32" `276 
v L "prescale" 2 499 "int8" `277 
v L "postscale" 2 499 "int8" `278 
v L "period" 2 499 "int16" `279 
f B "setup_motor_pwm" 2 499 "void(int8 pwm,int32 mode,int8 prescale,int8 postscale,int16 period)" `274 
f N "set_motor_unit" 2 500 ""
v L "pwm" 2 500 "int8" `281 
v L "pin_pair" 2 500 "int8" `282 
v L "mode" 2 500 "int16" `283 
v L "active_deadtime" 2 500 "int8" `284 
v L "inactive_deadtime" 2 500 "int8" `285 
f B "set_motor_unit" 2 500 "void(int8 pwm,int8 pin_pair,int16 mode,int8 active_deadtime,int8 inactive_deadtime)" `280 
f N "set_motor_pwm_duty" 2 501 ""
v L "pwm" 2 501 "int8" `287 
v L "pin_pair" 2 501 "int8" `288 
v L "duty" 2 501 "int16" `289 
f B "set_motor_pwm_duty" 2 501 "void(int8 pwm,int8 pin_pair,int16 duty)" `286 
f N "set_motor_pwm_event" 2 502 ""
v L "pwm" 2 502 "int8" `291 
v L "time" 2 502 "sint16" `292 
f B "set_motor_pwm_event" 2 502 "void(int8 pwm,sint16 time)" `290 
f N "set_motor_pwm_event" 2 503 ""
v L "pwm" 2 503 "int8" `294 
v L "time" 2 503 "sint16" `295 
v L "postscale" 2 503 "int8" `296 
f B "set_motor_pwm_event" 2 503 "void(int8 pwm,sint16 time,int8 postscale)" `293 
f N "get_motor_pwm_count" 2 504 ""
v L "pwm" 2 504 "int8" `298 
f B "get_motor_pwm_count" 2 504 "int16(int8 pwm)" `297  "Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):"
d G "MPWM_DISABLED" 2 506 "0"
d G "MPWM_FREE_RUN" 2 507 "0x8000"
d G "MPWM_SINGLE_PULSE" 2 508 "0x8001"
d G "MPWM_UP_DOWN" 2 509 "0x8002"
d G "MPWM_UP_DOWN_WITH_INTS" 2 510 "0x8003"
d G "MPWM_HALT_WHEN_IDLE" 2 512 "0x2000"
d G "MPWM_DUTY_UPDATES_IMMEADIATE" 2 513 "0x40000"
d G "MPWM_SYNC_OVERRIDES" 2 514 "0x20000"
d G "MPWM_DISABLE_UPDATES" 2 515 "0x10000"
d G "MPWM_LATCH_FAULTS" 2 516 "0x100000"
d G "MPWM_INDEPENDENT" 2 519 "0x0001"
d G "MPWM_ENABLE" 2 520 "0x0006" "both H and L"
d G "MPWM_ENABLE_H" 2 521 "0x0004"
d G "MPWM_ENABLE_L" 2 522 "0x0002"
d G "MPWM_FORCE_L_0" 2 524 "0x0010"
d G "MPWM_FORCE_L_1" 2 525 "0x0050"
d G "MPWM_FORCE_H_0" 2 526 "0x0020"
d G "MPWM_FORCE_H_1" 2 527 "0x00A0"
d G "MPWM_FAULTA_LA_HA" 2 529 "0x0700"
d G "MPWM_FAULTA_LA_HI" 2 530 "0x0500"
d G "MPWM_FAULTA_LI_HA" 2 531 "0x0600"
d G "MPWM_FAULTA_LI_HI" 2 532 "0x0400"
d G "MPWM_FAULTB_LA_HA" 2 533 "0x7000"
d G "MPWM_FAULTB_LA_HI" 2 534 "0x5000"
d G "MPWM_FAULTB_LI_HA" 2 535 "0x6000"
d G "MPWM_FAULTB_LI_HI" 2 536 "0x4000"
d G "MPWM_FAULT_NO_CHANGE" 2 537 "0x0000"
c L "get_motor_pwm_count" 2 3 3 "FUNCTION"
f N "abs" 2 543 ""
v L "x" 2 543 "sint8" `300 
f B "abs" 2 543 "sint8(sint8 x)" `299 
f N "abs" 2 544 ""
v L "x" 2 544 "sint16" `302 
f B "abs" 2 544 "sint16(sint16 x)" `301 
f N "abs" 2 545 ""
v L "x" 2 545 "sint32" `304 
f B "abs" 2 545 "sint32(sint32 x)" `303 
f N "abs" 2 546 ""
v L "x" 2 546 "float" `306 
f B "abs" 2 546 "float(float x)" `305 
f N "_mul" 2 547 ""
v L "??65535" 2 547 "int8" `308 
v L "??65535" 2 547 "int8" `309 
f B "_mul" 2 547 "int16(int8 ,int8 )" `307 
f N "_mul" 2 548 ""
v L "??65535" 2 548 "sint8" `311 
v L "??65535" 2 548 "sint8" `312 
f B "_mul" 2 548 "sint16(sint8 ,sint8 )" `310 
f N "_mul" 2 549 ""
v L "??65535" 2 549 "int16" `314 
v L "??65535" 2 549 "int16" `315 
f B "_mul" 2 549 "int32(int16 ,int16 )" `313 
f N "_mul" 2 550 ""
v L "??65535" 2 550 "sint16" `317 
v L "??65535" 2 550 "sint16" `318 
f B "_mul" 2 550 "sint32(sint16 ,sint16 )" `316 
f N "abs" 2 551 ""
v L "x" 2 551 "?" `320 
f B "abs" 2 551 "?(? x)" `319 
f N "abs" 2 552 ""
v L "x" 2 552 "?" `322 
f B "abs" 2 552 "?(? x)" `321 
f N "abs" 2 553 ""
v L "x" 2 553 "?" `324 
f B "abs" 2 553 "?(? x)" `323 
f N "abs" 2 554 ""
v L "x" 2 554 "?" `326 
f B "abs" 2 554 "?(? x)" `325 
f N "_mul" 2 555 ""
v L "??65535" 2 555 "int32" `328 
v L "??65535" 2 555 "int32" `329 
f B "_mul" 2 555 "?(int32 ,int32 )" `327 
f N "_mul" 2 556 ""
v L "??65535" 2 556 "sint32" `331 
v L "??65535" 2 556 "sint32" `332 
f B "_mul" 2 556 "?(sint32 ,sint32 )" `330 
f N "_mul" 2 557 ""
v L "??65535" 2 557 "?" `334 
v L "??65535" 2 557 "?" `335 
f B "_mul" 2 557 "?(? ,? )" `333 
f N "_mul" 2 558 ""
v L "??65535" 2 558 "?" `337 
v L "??65535" 2 558 "?" `338 
f B "_mul" 2 558 "?(? ,? )" `336  "Memory Manipulation Prototypes:"
f N "strcpy" 2 561 ""
v L "dest" 2 561 "*sint8" `340 
v L "src" 2 561 "*sint8" `341 
f B "strcpy" 2 561 "void(*sint8 dest,*sint8 src)" `339 
f N "memset" 2 562 ""
v L "destination" 2 562 "*int8" `343 
v L "value" 2 562 "int8" `344 
v L "num" 2 562 "int16" `345 
f B "memset" 2 562 "void(*int8 destination,int8 value,int16 num)" `342 
f N "memcpy" 2 563 ""
v L "destination" 2 563 "*int8" `347 
v L "source" 2 563 "*int8" `348 
v L "num" 2 563 "int16" `349 
f B "memcpy" 2 563 "void(*int8 destination,*int8 source,int16 num)" `346  "Data Manipulators Prototypes:"
f N "shift_left" 2 566 ""
v L "address" 2 566 "*int8" `351 
v L "bytes" 2 566 "int8" `352 
v L "value" 2 566 "int8" `353 
f B "shift_left" 2 566 "int8(*int8 address,int8 bytes,int8 value)" `350 
f N "shift_right" 2 567 ""
v L "address" 2 567 "*int8" `355 
v L "bytes" 2 567 "int8" `356 
v L "value" 2 567 "int8" `357 
f B "shift_right" 2 567 "int8(*int8 address,int8 bytes,int8 value)" `354 
f N "rotate_left" 2 568 ""
v L "address" 2 568 "*int8" `359 
v L "bytes" 2 568 "int8" `360 
f B "rotate_left" 2 568 "void(*int8 address,int8 bytes)" `358 
f N "rotate_right" 2 569 ""
v L "address" 2 569 "*int8" `362 
v L "bytes" 2 569 "int8" `363 
f B "rotate_right" 2 569 "void(*int8 address,int8 bytes)" `361 
f N "swap" 2 570 ""
v L "value" 2 570 "int8" `365 
f B "swap" 2 570 "void(int8 value)" `364 
f N "make8" 2 571 ""
v L "var" 2 571 "int16" `367 
v L "offset" 2 571 "int8" `368 
f B "make8" 2 571 "int8(int16 var,int8 offset)" `366 
f N "make8" 2 572 ""
v L "var" 2 572 "int32" `370 
v L "offset" 2 572 "int8" `371 
f B "make8" 2 572 "int8(int32 var,int8 offset)" `369 
f N "make16" 2 573 ""
v L "varhigh" 2 573 "int8" `373 
v L "varlow" 2 573 "int8" `374 
f B "make16" 2 573 "int16(int8 varhigh,int8 varlow)" `372 
f N "make32" 2 574 ""
v L "var1" 2 574 "int16" `376 
f B "make32" 2 574 "int32(int16 var1)" `375 
f N "make32" 2 575 ""
v L "var1" 2 575 "int16" `378 
v L "var2" 2 575 "int16" `379 
f B "make32" 2 575 "int32(int16 var1,int16 var2)" `377 
f N "make32" 2 576 ""
v L "var1" 2 576 "int16" `381 
v L "var2" 2 576 "int8" `382 
f B "make32" 2 576 "int32(int16 var1,int8 var2)" `380 
f N "make32" 2 577 ""
v L "var1" 2 577 "int16" `384 
v L "var2" 2 577 "int8" `385 
v L "var3" 2 577 "int8" `386 
f B "make32" 2 577 "int32(int16 var1,int8 var2,int8 var3)" `383 
f N "make32" 2 578 ""
v L "var1" 2 578 "int8" `388 
f B "make32" 2 578 "int32(int8 var1)" `387 
f N "make32" 2 579 ""
v L "var1" 2 579 "int8" `390 
v L "var2" 2 579 "int8" `391 
f B "make32" 2 579 "int32(int8 var1,int8 var2)" `389 
f N "make32" 2 580 ""
v L "var1" 2 580 "int8" `393 
v L "var2" 2 580 "int8" `394 
v L "var3" 2 580 "int8" `395 
f B "make32" 2 580 "int32(int8 var1,int8 var2,int8 var3)" `392 
f N "make32" 2 581 ""
v L "var1" 2 581 "int8" `397 
v L "var2" 2 581 "int8" `398 
v L "var3" 2 581 "int8" `399 
v L "var4" 2 581 "int8" `400 
f B "make32" 2 581 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `396 
f N "make32" 2 582 ""
v L "var1" 2 582 "int8" `402 
v L "var2" 2 582 "int16" `403 
f B "make32" 2 582 "int32(int8 var1,int16 var2)" `401 
f N "make32" 2 583 ""
v L "var1" 2 583 "int8" `405 
v L "var2" 2 583 "int16" `406 
v L "var3" 2 583 "int8" `407 
f B "make32" 2 583 "int32(int8 var1,int16 var2,int8 var3)" `404 
f N "make32" 2 584 ""
v L "var1" 2 584 "int8" `409 
v L "var2" 2 584 "int8" `410 
v L "var3" 2 584 "int16" `411 
f B "make32" 2 584 "int32(int8 var1,int8 var2,int16 var3)" `408 
f N "bit_set" 2 585 ""
v L "var" 2 585 "int8" `413 
v L "bit" 2 585 "int8" `414 
f B "bit_set" 2 585 "void(int8 var,int8 bit)" `412 
f N "bit_set" 2 586 ""
v L "var" 2 586 "int16" `416 
v L "bit" 2 586 "int8" `417 
f B "bit_set" 2 586 "void(int16 var,int8 bit)" `415 
f N "bit_set" 2 587 ""
v L "var" 2 587 "int32" `419 
v L "bit" 2 587 "int8" `420 
f B "bit_set" 2 587 "void(int32 var,int8 bit)" `418 
f N "bit_clear" 2 588 ""
v L "var" 2 588 "int8" `422 
v L "bit" 2 588 "int8" `423 
f B "bit_clear" 2 588 "void(int8 var,int8 bit)" `421 
f N "bit_clear" 2 589 ""
v L "var" 2 589 "int16" `425 
v L "bit" 2 589 "int8" `426 
f B "bit_clear" 2 589 "void(int16 var,int8 bit)" `424 
f N "bit_clear" 2 590 ""
v L "var" 2 590 "int32" `428 
v L "bit" 2 590 "int8" `429 
f B "bit_clear" 2 590 "void(int32 var,int8 bit)" `427 
f N "bit_test" 2 591 ""
v L "var" 2 591 "int8" `431 
v L "bit" 2 591 "int8" `432 
f B "bit_test" 2 591 "int8(int8 var,int8 bit)" `430 
f N "bit_test" 2 592 ""
v L "var" 2 592 "int16" `434 
v L "bit" 2 592 "int8" `435 
f B "bit_test" 2 592 "int8(int16 var,int8 bit)" `433 
f N "bit_test" 2 593 ""
v L "var" 2 593 "int32" `437 
v L "bit" 2 593 "int8" `438 
f B "bit_test" 2 593 "int8(int32 var,int8 bit)" `436 
f N "bit_set" 2 594 ""
v L "var" 2 594 "?" `440 
v L "bit" 2 594 "int8" `441 
f B "bit_set" 2 594 "void(? var,int8 bit)" `439 
f N "bit_set" 2 595 ""
v L "var" 2 595 "?" `443 
v L "bit" 2 595 "int8" `444 
f B "bit_set" 2 595 "void(? var,int8 bit)" `442 
f N "bit_clear" 2 596 ""
v L "var" 2 596 "?" `446 
v L "bit" 2 596 "int8" `447 
f B "bit_clear" 2 596 "void(? var,int8 bit)" `445 
f N "bit_clear" 2 597 ""
v L "var" 2 597 "?" `449 
v L "bit" 2 597 "int8" `450 
f B "bit_clear" 2 597 "void(? var,int8 bit)" `448 
f N "bit_test" 2 598 ""
v L "var" 2 598 "?" `452 
v L "bit" 2 598 "int8" `453 
f B "bit_test" 2 598 "int8(? var,int8 bit)" `451 
f N "bit_test" 2 599 ""
v L "var" 2 599 "?" `455 
v L "bit" 2 599 "int8" `456 
f B "bit_test" 2 599 "int8(? var,int8 bit)" `454 
f N "bit_first" 2 600 ""
v L "value" 2 600 "int8" `458 
v L "var" 2 600 "int16" `459 
f B "bit_first" 2 600 "int8(int8 value,int16 var)" `457 
f N "bit_last" 2 601 ""
v L "var" 2 601 "sint16" `461 
f B "bit_last" 2 601 "int8(sint16 var)" `460 
f N "bit_last" 2 602 ""
v L "value" 2 602 "int8" `463 
v L "var" 2 602 "sint16" `464 
f B "bit_last" 2 602 "int8(int8 value,sint16 var)" `462  "#use delay() Prototypes:"
f N "delay_cycles" 2 605 ""
v L "count" 2 605 "int16" `466 
f B "delay_cycles" 2 605 "void(int16 count)" `465 
f N "delay_ms" 2 606 ""
v L "time" 2 606 "int16" `468 
f B "delay_ms" 2 606 "void(int16 time)" `467 
f N "delay_us" 2 607 ""
v L "time" 2 607 "int16" `470 
f B "delay_us" 2 607 "void(int16 time)" `469  "#use rs232() Prototypes:"
f N "putchar" 2 610 ""
v L "cdata" 2 610 "sint8" `472 
f B "putchar" 2 610 "void(sint8 cdata)" `471 
f N "putchar" 2 611 ""
v L "cdata" 2 611 "sint8" `474 
v L "stream" 2 611 "int8" `475 
f B "putchar" 2 611 "void(sint8 cdata,int8 stream)" `473 
f N "puts" 2 612 ""
v L "string" 2 612 "*sint8" `477 
f B "puts" 2 612 "void(*sint8 string)" `476 
f N "puts" 2 613 ""
v L "string" 2 613 "*sint8" `479 
v L "stream" 2 613 "int8" `480 
f B "puts" 2 613 "void(*sint8 string,int8 stream)" `478 
f N "getch" 2 614 ""
f B "getch" 2 614 "sint8()" `481 
f N "getch" 2 615 ""
v L "stream" 2 615 "int8" `483 
f B "getch" 2 615 "sint8(int8 stream)" `482 
f N "gets" 2 616 ""
v L "string" 2 616 "*sint8" `485 
f B "gets" 2 616 "void(*sint8 string)" `484 
f N "gets" 2 617 ""
v L "string" 2 617 "*sint8" `487 
v L "stream" 2 617 "int8" `488 
f B "gets" 2 617 "void(*sint8 string,int8 stream)" `486 
f N "kbhit" 2 618 ""
f B "kbhit" 2 618 "int8()" `489 
f N "kbhit" 2 619 ""
v L "stream" 2 619 "int8" `491 
f B "kbhit" 2 619 "int8(int8 stream)" `490 
f N "printf" 2 620 ""
v L "string" 2 620 "*sint8" `493 
f B "printf" 2 620 "void(*sint8 string,*int8 _VA_LIST)" `492 
f N "fprintf" 2 621 ""
v L "stream" 2 621 "int8" `496 
v L "string" 2 621 "*sint8" `497 
f B "fprintf" 2 621 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `495 
f N "putc_send" 2 622 ""
f B "putc_send" 2 622 "void()" `499 
f N "fputc_send" 2 623 ""
v L "stream" 2 623 "int8" `501 
f B "fputc_send" 2 623 "void(int8 stream)" `500 
f N "rcv_buffer_full" 2 624 ""
f B "rcv_buffer_full" 2 624 "int8()" `502 
f N "rcv_buffer_full" 2 625 ""
v L "stream" 2 625 "int8" `504 
f B "rcv_buffer_full" 2 625 "int8(int8 stream)" `503 
f N "rcv_buffer_bytes" 2 626 ""
f B "rcv_buffer_bytes" 2 626 "int16()" `505 
f N "rcv_buffer_bytes" 2 627 ""
v L "stream" 2 627 "int8" `507 
f B "rcv_buffer_bytes" 2 627 "int16(int8 stream)" `506 
f N "tx_buffer_full" 2 628 ""
f B "tx_buffer_full" 2 628 "int8()" `508 
f N "tx_buffer_full" 2 629 ""
v L "stream" 2 629 "int8" `510 
f B "tx_buffer_full" 2 629 "int8(int8 stream)" `509 
f N "tx_buffer_bytes" 2 630 ""
f B "tx_buffer_bytes" 2 630 "int16()" `511 
f N "tx_buffer_bytes" 2 631 ""
v L "stream" 2 631 "int8" `513 
f B "tx_buffer_bytes" 2 631 "int16(int8 stream)" `512  "#use i2c() Prototypes:"
f N "i2c_read" 2 634 ""
f B "i2c_read" 2 634 "int8()" `514 
f N "i2c_read" 2 635 ""
v L "ack" 2 635 "int8" `516 
f B "i2c_read" 2 635 "int8(int8 ack)" `515 
f N "i2c_read" 2 636 ""
v L "stream" 2 636 "int8" `518 
v L "ack" 2 636 "int8" `519 
f B "i2c_read" 2 636 "int8(int8 stream,int8 ack)" `517 
f N "i2c_write" 2 637 ""
v L "data" 2 637 "int8" `521 
f B "i2c_write" 2 637 "int8(int8 data)" `520 
f N "i2c_write" 2 638 ""
v L "stream" 2 638 "int8" `523 
v L "data" 2 638 "int8" `524 
f B "i2c_write" 2 638 "int8(int8 stream,int8 data)" `522 
f N "i2c_start" 2 639 ""
f B "i2c_start" 2 639 "void()" `525 
f N "i2c_start" 2 640 ""
v L "stream" 2 640 "int8" `527 
f B "i2c_start" 2 640 "void(int8 stream)" `526 
f N "i2c_start" 2 641 ""
v L "stream" 2 641 "int8" `529 
v L "restart" 2 641 "int8" `530 
f B "i2c_start" 2 641 "void(int8 stream,int8 restart)" `528 
f N "i2c_stop" 2 642 ""
f B "i2c_stop" 2 642 "void()" `531 
f N "i2c_stop" 2 643 ""
v L "stream" 2 643 "int8" `533 
f B "i2c_stop" 2 643 "void(int8 stream)" `532 
f N "i2c_isr_state" 2 644 ""
f B "i2c_isr_state" 2 644 "sint8()" `534 
f N "i2c_slaveaddr" 2 645 ""
v L "addr" 2 645 "int8" `536 
f B "i2c_slaveaddr" 2 645 "void(int8 addr)" `535 
f N "i2c_slaveaddr" 2 646 ""
v L "stream" 2 646 "int8" `538 
v L "addr" 2 646 "int8" `539 
f B "i2c_slaveaddr" 2 646 "void(int8 stream,int8 addr)" `537 
f N "i2c_poll" 2 647 ""
f B "i2c_poll" 2 647 "int8()" `540 
f N "i2c_poll" 2 648 ""
v L "stream" 2 648 "int8" `542 
f B "i2c_poll" 2 648 "int8(int8 stream)" `541 
f N "i2c_init" 2 649 ""
v L "baud" 2 649 "int32" `544 
f B "i2c_init" 2 649 "void(int32 baud)" `543 
f N "i2c_init" 2 650 ""
v L "stream" 2 650 "int8" `546 
v L "baud" 2 650 "int32" `547 
f B "i2c_init" 2 650 "void(int8 stream,int32 baud)" `545  "#use spi() Prototypes:"
f N "spi_xfer" 2 653 ""
f B "spi_xfer" 2 653 "int8()" `548 
f N "spi_xfer" 2 654 ""
f G "spi_xfer" 2 654 "int16(int8 data)" `549 
f N "spi_xfer" 2 655 ""
f G "spi_xfer" 2 655 "int32(int8 data)" `549 
f N "spi_xfer" 2 656 ""
v L "data" 2 656 "int8" `550 
f B "spi_xfer" 2 656 "int8(int8 data)" `549 
f N "spi_xfer" 2 657 ""
v L "data" 2 657 "int16" `552 
f B "spi_xfer" 2 657 "int16(int16 data)" `551 
f N "spi_xfer" 2 658 ""
v L "data" 2 658 "int32" `554 
f B "spi_xfer" 2 658 "int32(int32 data)" `553 
f N "spi_xfer" 2 659 ""
v L "stream" 2 659 "int8" `556 
v L "data" 2 659 "int8" `557 
f B "spi_xfer" 2 659 "int8(int8 stream,int8 data)" `555 
f N "spi_xfer" 2 660 ""
v L "stream" 2 660 "int8" `559 
v L "data" 2 660 "int16" `560 
f B "spi_xfer" 2 660 "int16(int8 stream,int16 data)" `558 
f N "spi_xfer" 2 661 ""
v L "stream" 2 661 "int8" `562 
v L "data" 2 661 "int32" `563 
f B "spi_xfer" 2 661 "int32(int8 stream,int32 data)" `561 
f N "spi_xfer" 2 662 ""
v L "stream" 2 662 "int8" `565 
v L "data" 2 662 "int8" `566 
v L "bits" 2 662 "int8" `567 
f B "spi_xfer" 2 662 "int8(int8 stream,int8 data,int8 bits)" `564 
f N "spi_xfer" 2 663 ""
v L "stream" 2 663 "int8" `569 
v L "data" 2 663 "int16" `570 
v L "bits" 2 663 "int8" `571 
f B "spi_xfer" 2 663 "int16(int8 stream,int16 data,int8 bits)" `568 
f N "spi_xfer" 2 664 ""
v L "stream" 2 664 "int8" `573 
v L "data" 2 664 "int32" `574 
v L "bits" 2 664 "int8" `575 
f B "spi_xfer" 2 664 "int32(int8 stream,int32 data,int8 bits)" `572 
f N "spi_init" 2 665 ""
v L "baud" 2 665 "int32" `577 
f B "spi_init" 2 665 "void(int32 baud)" `576 
f N "spi_init" 2 666 ""
v L "stream" 2 666 "int8" `579 
v L "baud" 2 666 "int32" `580 
f B "spi_init" 2 666 "void(int8 stream,int32 baud)" `578 
f N "spi_speed" 2 667 ""
v L "baud" 2 667 "int32" `582 
f B "spi_speed" 2 667 "void(int32 baud)" `581 
f N "spi_speed" 2 668 ""
v L "stream" 2 668 "int8" `584 
v L "baud" 2 668 "int32" `585 
f B "spi_speed" 2 668 "void(int8 stream,int32 baud)" `583 
f N "spi_speed" 2 669 ""
v L "stream" 2 669 "int8" `587 
v L "baud" 2 669 "int32" `588 
v L "clock" 2 669 "int32" `589 
f B "spi_speed" 2 669 "void(int8 stream,int32 baud,int32 clock)" `586 
f N "spi_prewrite" 2 670 ""
v L "data" 2 670 "int8" `591 
f B "spi_prewrite" 2 670 "void(int8 data)" `590 
f N "spi_prewrite" 2 671 ""
v L "data" 2 671 "int16" `593 
f B "spi_prewrite" 2 671 "void(int16 data)" `592 
f N "spi_prewrite" 2 672 ""
v L "data" 2 672 "int32" `595 
f B "spi_prewrite" 2 672 "void(int32 data)" `594 
f N "spi_prewrite" 2 673 ""
v L "??65535" 2 673 "int8" `597 
v L "data" 2 673 "int8" `598 
f B "spi_prewrite" 2 673 "void(int8 ,int8 data)" `596 
f N "spi_prewrite" 2 674 ""
v L "??65535" 2 674 "int8" `600 
v L "data" 2 674 "int16" `601 
f B "spi_prewrite" 2 674 "void(int8 ,int16 data)" `599 
f N "spi_prewrite" 2 675 ""
v L "??65535" 2 675 "int8" `603 
v L "data" 2 675 "int32" `604 
f B "spi_prewrite" 2 675 "void(int8 ,int32 data)" `602 
f N "spi_xfer_in" 2 676 ""
f B "spi_xfer_in" 2 676 "int8()" `605 
f N "spi_xfer_in" 2 677 ""
f G "spi_xfer_in" 2 677 "int16(int8 bits)" `606 
f N "spi_xfer_in" 2 678 ""
f G "spi_xfer_in" 2 678 "int32(int8 bits)" `606 
f N "spi_xfer_in" 2 679 ""
v L "bits" 2 679 "int8" `607 
f B "spi_xfer_in" 2 679 "int8(int8 bits)" `606 
f N "spi_xfer_in" 2 680 ""
v L "bits" 2 680 "int8" `609 
f G "spi_xfer_in" 2 680 "int16(int8 bits,int8 bits)" `608 
f N "spi_xfer_in" 2 681 ""
v L "bits" 2 681 "int8" `609 
f G "spi_xfer_in" 2 681 "int32(int8 bits,int8 bits)" `608 
f N "spi_xfer_in" 2 682 ""
v L "stream" 2 682 "int8" `609 
v L "bits" 2 682 "int8" `610 
f B "spi_xfer_in" 2 682 "int8(int8 stream,int8 bits)" `608 
f N "spi_xfer_in" 2 683 ""
v L "stream" 2 683 "int8" `609 
v L "bits" 2 683 "int8" `613 
f G "spi_xfer_in" 2 683 "int16(int8 stream,int8 bits,int8 task)" `611 
f N "spi_xfer_in" 2 684 ""
v L "stream" 2 684 "int8" `609 
v L "bits" 2 684 "int8" `613 
f G "spi_xfer_in" 2 684 "int32(int8 stream,int8 bits,int8 task)" `611  "#use rtos() Prototypes:"
f N "rtos_run" 2 687 ""
f B "rtos_run" 2 687 "void(int8 stream,int8 bits,int8 task)" `611 
f N "rtos_yield" 2 688 ""
f B "rtos_yield" 2 688 "void(int8 bits,int8 task)" `612 
f N "rtos_enable" 2 689 ""
v L "task" 2 689 "int8" `614 
f B "rtos_enable" 2 689 "void(int8 task)" `613 
f N "rtos_disable" 2 690 ""
v L "task" 2 690 "int8" `616 
f B "rtos_disable" 2 690 "void(int8 task)" `615 
f N "rtos_terminate" 2 691 ""
f B "rtos_terminate" 2 691 "void()" `617 
f N "rtos_await" 2 692 ""
v L "flag" 2 692 "int8" `619 
f B "rtos_await" 2 692 "void(int8 flag)" `618 
f N "rtos_wait" 2 693 ""
v L "sem" 2 693 "int8" `621 
f B "rtos_wait" 2 693 "void(int8 sem)" `620 
f N "rtos_signal" 2 694 ""
v L "sem" 2 694 "int8" `623 
f B "rtos_signal" 2 694 "void(int8 sem)" `622 
f N "rtos_msg_send" 2 695 ""
v L "task" 2 695 "int8" `625 
v L "msg" 2 695 "int8" `626 
f B "rtos_msg_send" 2 695 "void(int8 task,int8 msg)" `624 
f N "rtos_msg_read" 2 696 ""
f B "rtos_msg_read" 2 696 "int8()" `627 
f N "rtos_msg_poll" 2 697 ""
f B "rtos_msg_poll" 2 697 "int8()" `628 
f N "rtos_overrun" 2 698 ""
v L "task" 2 698 "int8" `630 
f B "rtos_overrun" 2 698 "int8(int8 task)" `629 
f N "rtos_stats" 2 699 ""
v L "task" 2 699 "int8" `632 
v L "stat" 2 699 "*int8" `633 
f B "rtos_stats" 2 699 "void(int8 task,*int8 stat)" `631  "#use timer() Prototypes:"
f N "get_ticks" 2 702 ""
f B "get_ticks" 2 702 "int8()" `634 
f N "get_ticks" 2 703 ""
f G "get_ticks" 2 703 "int16(int8 stream)" `635 
f N "get_ticks" 2 704 ""
f G "get_ticks" 2 704 "int32(int8 stream)" `635 
f N "get_ticks" 2 705 ""
f G "get_ticks" 2 705 "?(int8 stream)" `635 
f N "get_ticks" 2 706 ""
v L "stream" 2 706 "int8" `636 
f B "get_ticks" 2 706 "int8(int8 stream)" `635 
f N "get_ticks" 2 707 ""
v L "stream" 2 707 "int8" `638 
f G "get_ticks" 2 707 "int16(int8 stream)" `637 
f N "get_ticks" 2 708 ""
v L "stream" 2 708 "int8" `638 
f G "get_ticks" 2 708 "int32(int8 stream)" `637 
f N "get_ticks" 2 709 ""
v L "stream" 2 709 "int8" `638 
f G "get_ticks" 2 709 "?(int8 stream)" `637 
f N "set_ticks" 2 710 ""
v L "value" 2 710 "int8" `638 
f B "set_ticks" 2 710 "void(int8 value)" `637 
f N "set_ticks" 2 711 ""
v L "value" 2 711 "int16" `640 
f B "set_ticks" 2 711 "void(int16 value)" `639 
f N "set_ticks" 2 712 ""
v L "value" 2 712 "int32" `642 
f B "set_ticks" 2 712 "void(int32 value)" `641 
f N "set_ticks" 2 713 ""
v L "value" 2 713 "?" `644 
f B "set_ticks" 2 713 "void(? value)" `643 
f N "set_ticks" 2 714 ""
v L "stream" 2 714 "int8" `646 
v L "value" 2 714 "int8" `647 
f B "set_ticks" 2 714 "void(int8 stream,int8 value)" `645 
f N "set_ticks" 2 715 ""
v L "stream" 2 715 "int8" `649 
v L "value" 2 715 "int16" `650 
f B "set_ticks" 2 715 "void(int8 stream,int16 value)" `648 
f N "set_ticks" 2 716 ""
v L "stream" 2 716 "int8" `652 
v L "value" 2 716 "int32" `653 
f B "set_ticks" 2 716 "void(int8 stream,int32 value)" `651 
f N "set_ticks" 2 717 ""
v L "stream" 2 717 "int8" `655 
v L "value" 2 717 "?" `656 
f B "set_ticks" 2 717 "void(int8 stream,? value)" `654  "#use pwm() Prototypes:"
f N "pwm_on" 2 720 ""
f B "pwm_on" 2 720 "void()" `657 
f N "pwm_on" 2 721 ""
v L "stream" 2 721 "int8" `659 
f B "pwm_on" 2 721 "void(int8 stream)" `658 
f N "pwm_off" 2 722 ""
f B "pwm_off" 2 722 "void()" `660 
f N "pwm_off" 2 723 ""
v L "stream" 2 723 "int8" `662 
f B "pwm_off" 2 723 "void(int8 stream)" `661 
f N "pwm_set_duty" 2 724 ""
v L "duty" 2 724 "int16" `664 
f B "pwm_set_duty" 2 724 "void(int16 duty)" `663 
f N "pwm_set_duty" 2 725 ""
v L "stream" 2 725 "int8" `666 
v L "duty" 2 725 "int16" `667 
f B "pwm_set_duty" 2 725 "void(int8 stream,int16 duty)" `665 
f N "pwm_set_duty_percent" 2 726 ""
v L "percent" 2 726 "int16" `669 
f B "pwm_set_duty_percent" 2 726 "void(int16 percent)" `668 
f N "pwm_set_duty_percent" 2 727 ""
v L "stream" 2 727 "int8" `671 
v L "percent" 2 727 "int16" `672 
f B "pwm_set_duty_percent" 2 727 "void(int8 stream,int16 percent)" `670 
f N "pwm_set_frequency" 2 728 ""
v L "frequency" 2 728 "int32" `674 
f B "pwm_set_frequency" 2 728 "void(int32 frequency)" `673 
f N "pwm_set_frequency" 2 729 ""
v L "stream" 2 729 "int8" `676 
v L "frequency" 2 729 "int32" `677 
f B "pwm_set_frequency" 2 729 "void(int8 stream,int32 frequency)" `675  "#use capture() Prototypes:"
f N "get_capture_time" 2 732 ""
f B "get_capture_time" 2 732 "int16()" `678 
f N "get_capture_time" 2 733 ""
v L "stream" 2 733 "int8" `680 
f B "get_capture_time" 2 733 "int16(int8 stream)" `679 
f N "get_capture_event" 2 734 ""
f B "get_capture_event" 2 734 "int8()" `681 
f N "get_capture_event" 2 735 ""
v L "stream" 2 735 "int8" `683 
f B "get_capture_event" 2 735 "int8(int8 stream)" `682  "Environment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 744 ""
v L "address" 2 744 "int16" `685 
f B "goto_address" 2 744 "void(int16 address)" `684 
f N "label_address" 2 745 ""
v L "label" 2 745 "int16" `687 
f B "label_address" 2 745 "int16(int16 label)" `686  "Program Memory Prototypes:"
f N "read_program_memory" 2 748 ""
v L "address" 2 748 "int16" `689 
v L "dataptr" 2 748 "*int8" `690 
v L "count" 2 748 "int16" `691 
f B "read_program_memory" 2 748 "void(int16 address,*int8 dataptr,int16 count)" `688 
f N "erase_program_memory" 2 749 ""
v L "address" 2 749 "int16" `693 
f B "erase_program_memory" 2 749 "void(int16 address)" `692 
f N "write_program_memory" 2 750 ""
v L "address" 2 750 "int16" `695 
v L "dataptr" 2 750 "*int8" `696 
v L "count" 2 750 "int16" `697 
f B "write_program_memory" 2 750 "void(int16 address,*int8 dataptr,int16 count)" `694 
f N "read_configuration_memory" 2 751 ""
v L "dataptr" 2 751 "*int8" `699 
v L "count" 2 751 "int8" `700 
f B "read_configuration_memory" 2 751 "void(*int8 dataptr,int8 count)" `698 
f N "write_configuration_memory" 2 752 ""
v L "dataptr" 2 752 "*int8" `702 
v L "count" 2 752 "int8" `703 
f B "write_configuration_memory" 2 752 "void(*int8 dataptr,int8 count)" `701  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 757 "unsigned int16"
f N "read_eeprom" 2 762 ""
v L "address" 2 762 "int16" `705 
f B "read_eeprom" 2 762 "int16(int16 address)" `704 
f N "read_eeprom" 2 763 ""
v L "address" 2 763 "int16" `707 
v L "bytes" 2 763 "int8" `708 
f B "read_eeprom" 2 763 "int16(int16 address,int8 bytes)" `706 
f N "read_eeprom" 2 764 ""
v L "address" 2 764 "int16" `710 
v L "dataptr" 2 764 "*int8" `711 
v L "bytes" 2 764 "int16" `712 
f B "read_eeprom" 2 764 "void(int16 address,*int8 dataptr,int16 bytes)" `709 
f N "write_eeprom" 2 765 ""
v L "address" 2 765 "int16" `714 
v L "value" 2 765 "int16" `715 
f B "write_eeprom" 2 765 "void(int16 address,int16 value)" `713 
f N "write_eeprom" 2 766 ""
v L "address" 2 766 "int16" `717 
v L "dataptr" 2 766 "*int8" `718 
v L "bytes" 2 766 "int16" `719 
f B "write_eeprom" 2 766 "void(int16 address,*int8 dataptr,int16 bytes)" `716  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 773 ""
v L "interrupt" 2 773 "int16" `721 
f B "enable_interrupts" 2 773 "void(int16 interrupt)" `720 
f N "disable_interrupts" 2 774 ""
v L "interrupt" 2 774 "int16" `723 
f B "disable_interrupts" 2 774 "void(int16 interrupt)" `722 
f N "clear_interrupt" 2 775 ""
v L "interrupt" 2 775 "int16" `725 
f B "clear_interrupt" 2 775 "void(int16 interrupt)" `724 
f N "interrupt_active" 2 776 ""
v L "interrupt" 2 776 "int16" `727 
f B "interrupt_active" 2 776 "int8(int16 interrupt)" `726 
f N "interrupt_enabled" 2 777 ""
v L "interrupt" 2 777 "int16" `729 
f B "interrupt_enabled" 2 777 "int8(int16 interrupt)" `728 
f N "ext_int_edge" 2 778 ""
v L "source" 2 778 "int8" `731 
v L "edge" 2 778 "int8" `732 
f B "ext_int_edge" 2 778 "void(int8 source,int8 edge)" `730 
f N "jump_to_isr" 2 779 ""
v L "address" 2 779 "int16" `734 
f B "jump_to_isr" 2 779 "void(int16 address)" `733  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 781 "0x40"
d G "H_TO_L" 2 782 "0"
d G "INTR_GLOBAL" 2 786 "0x0800"
d G "GLOBAL" 2 787 "0x0800" "For compatibility with PIC16/18"
d G "INTR_NORMAL" 2 788 "0x1000"
d G "INTR_ALTERNATE" 2 789 "0x2000"
d G "INTR_LEVEL0" 2 790 "0x3000"
d G "INTR_LEVEL1" 2 791 "0x3001"
d G "INTR_LEVEL2" 2 792 "0x3002"
d G "INTR_LEVEL3" 2 793 "0x3003"
d G "INTR_LEVEL4" 2 794 "0x3004"
d G "INTR_LEVEL5" 2 795 "0x3005"
d G "INTR_LEVEL6" 2 796 "0x3006"
d G "INTR_LEVEL7" 2 797 "0x3007"
d G "INTR_CN_PIN" 2 813 "0x8000" "or in a PIN_xx constant (enable/disable only)"
d G "INT_OSCFAIL" 2 815 "1"
d G "INT_ADDRERR" 2 816 "2"
d G "INT_STACKERR" 2 817 "3"
d G "INT_MATHERR" 2 818 "4"
d G "INT_DMAERR" 2 819 "5"
d G "INT_EXT0" 2 820 "6"
d G "INT_IC1" 2 821 "7"
d G "INT_OC1" 2 822 "8"
d G "INT_TIMER1" 2 823 "9"
d G "INT_IC2" 2 824 "10"
d G "INT_OC2" 2 825 "11"
d G "INT_TIMER2" 2 826 "12"
d G "INT_TIMER3" 2 827 "13"
d G "INT_SPI1" 2 828 "14"
d G "INT_RDA" 2 829 "15"
d G "INT_TBE" 2 830 "16"
d G "INT_ADC1" 2 831 "17"
d G "INT_EEPROM" 2 832 "18"
d G "INT_SI2C" 2 833 "19"
d G "INT_MI2C" 2 834 "20"
d G "INT_CNI" 2 835 "21"
d G "INT_EXT1" 2 836 "22"
d G "INT_IC7" 2 837 "24"
d G "INT_IC8" 2 838 "25"
d G "INT_OC3" 2 839 "27"
d G "INT_OC4" 2 840 "29"
d G "INT_TIMER4" 2 841 "31"
d G "INT_TIMER5" 2 842 "33"
d G "INT_EXT2" 2 843 "35"
d G "INT_RDA2" 2 844 "36"
d G "INT_TBE2" 2 845 "37"
d G "INT_CAN1" 2 846 "39"
d G "INT_PWM1" 2 847 "58"
d G "INT_QEI" 2 848 "60"
d G "INT_FAULTA" 2 849 "66"
C L "jump_to_isr" 1 12 2 "FUNCTION"
D G "mClock" 0 5 "PIN_D2"
D G "mDirectoin" 0 6 "PIN_B7"
D G "mEnable" 0 7 "PIN_B8"
V G "Mydata" 0 21 "{sint16 i,float f,sint8[20] str}" `748 
V G "UseAdd" 0 22 "{sint8 LOWbyte,sint8 Highbyte,sint16 MYLocalAddress}" `749 
F N "main" 0 24 ""
F G "main" 0 24 "void()" `750 
C L "main" 0 50 1 "FUNCTION"
F N "isrTimer1" 0 56 ""
F G "isrTimer1" 0 56 "void()" `753 
F N "Timer2" 0 65 ""
F G "Timer2" 0 65 "void()" `754 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "profileout" 1 2
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "dsp_a" 1 2
F B "dsp_b" 1 2
F B "read_eeprom" 1 3
F B "write_eeprom" 2 3
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 4
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "set_pullup" 1 2
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "pll_locked" 0 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "set_analog_pins" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_qei" 1 4
F B "qei_set_count" 1 2
F B "qei_get_count" 0 1
F B "qei_status" 0 1
F B "setup_motor_pwm" 2 5
F B "set_motor_unit" 5 0
F B "set_motor_pwm_duty" 3 0
F B "set_motor_pwm_event" 2 3
F B "get_motor_pwm_count" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
